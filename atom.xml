<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[开发者说]]></title>
  <link href="http://devsay.com/atom.xml" rel="self"/>
  <link href="http://devsay.com/"/>
  <updated>2014-12-31T17:43:42+08:00</updated>
  <id>http://devsay.com/</id>
  <author>
    <name><![CDATA[devsay]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2014总结]]></title>
    <link href="http://devsay.com/blog/2014/12/31/2014-summary/"/>
    <updated>2014-12-31T16:53:35+08:00</updated>
    <id>http://devsay.com/blog/2014/12/31/2014-summary</id>
    <content type="html"><![CDATA[<p>今天是2014年的最后一天，总结下这一年的经验:</p>

<p>2014对于自己的关键词是&#8221;创业&#8221;&ldquo;
这几年，移动互联网领域的创业可以用火热来形容，创业有两种形式：
1.自己主导创业，作为公司的创始人；
2.加入一个创业团队。</p>

<p>今年年初跳槽创业，选择了第二种方式，也就是加入了一个创业团队。创业公司的节奏很快，成长也很快，会遇到各种各样的问题，人生当中确实需要创业经历来历练自己。</p>

<p>创业的生活:
加班:
创业的过程是苦的，始终保持着每周最少6x12小时的工作制，有时会干到半夜三点。在此期间养成了跑步的习惯，跑步成了我释放压力最主要的方式，基本每天晚上保证五公里的长度，一直坚持到了11月份。在任何公司，尤其是创业公司，学会如何释放压力是非常非常重要的。互联网公司避免不了加班，但加班要有个度，关键是如何提高工作效率，长期过度加班最终伤的是整个团队，所以团队建设对于创业公司尤其重要。</p>

<p>工作:
创业是一个摸着石头过河的过程，大家都在摸索中前进，免不了走弯路。创业的这一年，产品在不断的迭代，走过的弯路不少。对于移动互联网，拼的就是时间，产品讲究的是快速迭代，哪个产品能抢在时间前面就成功了一大半。团队要明白产品的定位，对需求的定位要更加精确，不确定的定位和需求最终会不断拖慢产品的迭代，能做减法绝不做加法。需求明确了，接下来就是团队的执行力。</p>

<p>在这一年中，在不断提高自己技术功底的同时，也在不断的体验各种产品，关注各种移动互联网创业公司的动态，寻找创意。<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/12/31/2014-summary/'><a href="http://devsay.com/blog/2014/12/31/2014-summary/">http://devsay.com/blog/2014/12/31/2014-summary/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初识Swift]]></title>
    <link href="http://devsay.com/blog/2014/12/20/recognize-swift/"/>
    <updated>2014-12-20T18:16:11+08:00</updated>
    <id>http://devsay.com/blog/2014/12/20/recognize-swift</id>
    <content type="html"><![CDATA[<p>Swift是苹果推出的全新编程语言，至今已有几个月了。在Swift语言刚推出时，我只是大概了解了下，并没有使用并深入研究。考虑到苹果的一贯做法，学习新的Swift是很有必要的。而且作为开发者，也要不断更新自己的知识。Swift与Objective-C可以在同一个工程中混用，所以我在做新的页面时，采用了Swift语言来实现新的模块。</p>

<p>在已有的Objective-C工程的基础上使用Swift开发，首先创建类，两种方式：
1.选择新建Source->Swift File
这样会自动在工程中生成一个文件:工程名-Bridging-Header.h
可以在Build Settings->Swift Compiler->Objective-C Bridging Header中看到此文件在编译选项中已经设置好了
当在Swift中引用Objective-C的类时，只要在Bridging Header中import即可。
2.选择新建Cocoa Touch Class，填好类名后，选择Language为Swift，这种方式只会生成类的swift文件，不会生成Bridging-Header.h这个文件，需要我们手动创建此文件。</p>

<p>这样子，我们第一个Swift文件已经生成，可以看到，Swift与Objective-C是一门完全不同的语言，写法上更像是脚本语言。
类对应的Swift没有.h文件，只有一个以.swift结尾的文件, Swift语句之后可以不写逗号</p>

<p>Swift与Objective-C的一些区别:
增加了声明:
let 常量
var 变量</p>

<p>基本类型:Int, Double, Float, Bool
注意Bool类型的值只有两种:true, false,取消了YES, NO, Bool是一个数据类型，与int没有任何关系</p>

<p>新增元组Tuple类型
表示一组数据, Tuple内的值可以是任意不相同的类型</p>

<p>新增Optional类型，可以用在任何类型上
表示两种含义1.nil，没有纸 2.有一个某某类型的值</p>

<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/12/20/recognize-swift/'>http://devsay.com/blog/2014/12/20/recognize-swift/</a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'>http://devsay.com</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objective-C Runtime]]></title>
    <link href="http://devsay.com/blog/2014/11/19/ios-runtime/"/>
    <updated>2014-11-19T15:45:55+08:00</updated>
    <id>http://devsay.com/blog/2014/11/19/ios-runtime</id>
    <content type="html"><![CDATA[<p>版本:</p>

<p>Objective-C的runtime有两种不同的版本: Legacy、Modern.
Modern版本又Objective-C 2.0引进并且包含了一些新的特性。
其最显著的特性是实例变量都是非脆弱的(non-fragile)
1.legacy runtime，如果你改变了一个类的实例变量，你必须重新编译继承它的类。</p>

<p>2.modern runtime，如果你改变了一个类的实例变量，没必要重新编译继承它的类。</p>

<p>平台:</p>

<p>iPhone应用和基于OS X v10.5以上的64位的程序使用modern runtime.</p>

<p>其它的即基于OS X desktop的32位程序使用legacy runtime.</p>

<p>运行时机制：
Objective-C会将尽可能多得将决策从编译时间和链接时间中推迟到运行时，只要可能，它总是动态的执行任务。</p>

<p>Objective-C是一门动态语言，其方法调用[receiver message]</p>

<p>并不是简单地方法调用，而是向receiver发送message消息，这个绑定是在编译阶段做的，具体怎么响应则依赖于运行时环境。</p>

<p>现在用的基本上都是Objective-C 2.0运行时库，/usr/lib/libobjc.A.dylib共享库实现了函数功能，提供了对Objective-C的动态特性的支持.</p>

<p>首先看看定义</p>

<p>usr/include/objc/message.h</p>

<p>objc_msgSend(id self, SEL op, …);</p>

<p>与Runtime交互
Objective-C程序与runtime system交互有三种不同层级的方式:
1.Objective-C源码
大部分情况下，运行时系统会在幕后自动运行，你只需要编写并且编译Objective-C源码。
当你编译的代码包括Objective-C的类和方法时，编译器会自动创建实现了动态语言特性的数据结构和函数调用。</p>

<p>2.Foundation framework中NSObject类里面定义的方法
Cocoa中的大部分对象都是NSObject的子类，所以也就继承了它的方法，NSProxy类是个特例。</p>

<p>3.直接调用运行时函数接口
运行时系统是一个共享库，由一些列函数和数据结构构成的头文件的公共接口。
位于目录/user/include/objc.
里面的许多函数允许你使用纯C语言去代替Objective-C编译器的工作。
这些函数使得我们可以为运行时系统开发其它接口并且增强开发环境，使用Objective-C编程时，这些接口通常用不到，有时只有一些接口对我们有用。</p>

<p>消息机制：</p>

<p>objc_msgSend函数：</p>

<p>Objective-C中，消息直到运行时才会和方法实现绑定。
[receiver message]
编译器会这个消息表达翻译成消息函数调用，objc_msgSend. 这个函数使用receiver和消息中提到的函数名(即方法选择器)作为它的两个主要参数:
objc_msgSend(receiver, selector)
传入消息的任何参数也交给了objc_msgSend:
objc_msgSend(receiver, selector, arg1, arg2, …)</p>

<p>objc_msgSend为了动态绑定做了一切必要的工作：</p>

<p>1.首先寻找引用的selector的具体方法实现。因为相同的函数可以在不同的类中又不同的实现，需要根据接受者的类来找对应的方法实现。</p>

<p>2.调用具体的实现方法，将接受者对象传递过去(及指向其数据的指针)，以及其它为方法中定义的参数。</p>

<p>3.将函数实现中得返回值作为自己的返回值传递。</p>

<p>调用消息函数的过程都是由编译器生成的，我们在代码中不可直接调用。</p>

<p>消息机制的关键依赖于编译器为每个类和对象建立的结构。每个类结构包括两个关键元素：</p>

<p>1.指向superclass的指针；</p>

<p>2.类的调度表，这张表包含了联系入口，即方法选择器和类中定义的方法的地址的对应关系</p>

<p>比如：选择器setOrigin::方法与setOrigin::的地址关联</p>

<p>一个新的对象被创建时，会为其分配内存并初始化其实例变量。对象之中的第一个变量是指向其类结构的叫做isa的指针，</p>

<p>严格来说，并不是作为语言的一部分，对于一个对象能够在运行时系统运转，isa指针是必须的.</p>

<p>类元素和对象结构关系图表:</p>

<p><img src="http://devsay.com/images/runtime/messaging1.gif" alt="" /></p>

<p>当像一个对象发送消息时，消息函数根据对象的isa指针指向的类结构的调度表中查询方法选择器。如果找不到对应的选择器，objc_msgSend继续到父类的调度表中查找，就这样按照继承层级一直往上查找，直到NSObject类。一旦定位到方法选择器，函数会调用调度表中的方法入口并将接受者对象的数据结构传递进去。</p>

<p>这种在运行时选择方法实现的方式，在面向对象编程语言的专业术语中，方法是动态地绑定到消息。</p>

<p>为了加快消息机制的处理工程，运行时系统会缓存使用过的方法选择器和方法地址。每个类都有一个单独的缓存，包含类中定义的和集成来的方法选择器。在查询调度表前，会首先检查接受者对象的类是否有缓存(理论上，使用过的方法有可能再次被使用). 如果方法选择器在缓存中，消息只会比函数调用稍慢。只要程序运行的时间足够长，几乎发送过的消息都会缓存起来，缓存动态的增长以适应新的消息。</p>

<p>转发机制：</p>

<p>Dynamic Method Resolution
如何动态的提供方法实现</p>

<p>很多情况下，我们需要动态地实现一个方法。比如，Objective-C声明了一个属性包含@dynamic指令:
@dynamic propertyName;
告诉编译器跟此属性有关联的方法会动态的提供。
你可以通过实现 resolveInstanceMethod: 和resolveClassMethod: 分别来为给定的实例和类方法选择器来动态的提供方法实现。
Objective-C方法只是一个至少包含两个参数self和<em>cmd的C语言函数。你可以使用class_addMethod来为一个类添加一个方法。
比如针对这个函数：
void dynamicMethodIMP(id self, SEL </em>cmd) {
    //implementation &hellip;
}</p>

<p>你可以可以将其作为一个方法动态的加入到类中，就像这样：
@implementation MyClass
+(BOOL)resolveInstanceMethod:(SEL)aSEL {
    if (aSEL == @selector(resolveThisMethodDynamically)) {
        class_addMehtod([self class], aSEL, (IMP)dynamicMehtodMP, &ldquo;v0:&rdquo;)
        return YES;
    }
    return [super resolveInstanceMehtod:aSEL];
}
Objective-C程序可以在运行中载入链接新的类和Category。
动态加载可以被用来做很多不同的事情。比如:系统引用中的各种模块都是动态加载的。
在Cocoa环境中，动态载入一般用来使得应用可以被定制化，你的应用在运行时可以加载别人写的模块。
可加载的模块可以扩展你的应用.
你提供framework, 别人来提供代码。</p>

<p>Message Forwarding消息转发
向一个对象发送消息而不处理消息是错误的。然而，通知错误之前，运行时系统给了接受消息的对象第二次处理消息的机会。
运行时系统会发送forwardInvocation:消息给对象，并且将一个NSInvocation对象作为它的唯一参数，NSInvocation对象封装了原始的消息和消息带的参数。
你可以实现forwardInvocation:方法作为对消息的默认响应，或者使用其它方法来避免错误。
顾名思义，forwardInvocation通常用于将消息转发给另一个对象。<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/11/19/ios-runtime/'><a href="http://devsay.com/blog/2014/11/19/ios-runtime/">http://devsay.com/blog/2014/11/19/ios-runtime/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS图片缓存]]></title>
    <link href="http://devsay.com/blog/2014/11/15/ios-image-cache/"/>
    <updated>2014-11-15T15:21:24+08:00</updated>
    <id>http://devsay.com/blog/2014/11/15/ios-image-cache</id>
    <content type="html"><![CDATA[<p>iOS的内存管理始终是开发者面临的大问题，内存占用过大时，很容易会被系统kill掉，开发者需要尽可能的优化内存占用问题。</p>

<p>现在的App界面做的越来越精致，里面集成了大量的图片，笔者首先想到的就是如何减少这些图片占用的内存。</p>

<p>通常我们加载图片使用以下方式:
1.imageNamed:
图片加载完成后，系统会把它缓存在内存中，当第二次加载时，直接就从内存中读取了，好处是加载速度过，缺点就是会一直占用系统内存，当我们的图片需要反复加载时，这种方式是一种不错的选择；
2.imageWithContentOfFile:
图片只加载一次，不会缓存在内存中，用完后就把占用的内存释放掉，每次都重新加载，这种加载方式适合只加载少次的情况。</p>

<p>Asset Catalog
是苹果推出的新的图片资源管理工具，方便、直观
打包时，苹果会将图片资源统一打包成.car的文件，我们获取不到里面的图片路径，也就无法使用imageWithContentOfFile的方式加载了，只能使用imageNamed来加载，也就意味着加载过的图片全都缓存在了内存里，这样，整个App占用的内存就会比较大，被系统kill掉得风险就大了。</p>

<p>解决办法：
由于之前的工程一直使用Asset Catalog方式管理图片资源，现在需要想办法减少整个App的内存占用。首先想到的方法就是把图片从Asset Catalog中移出来。
把Asset Catalog目录下地所有内容都Copy出来，然后将Asset Cataglog整个目录删掉。</p>

<p>如果是原来使用Asset Catalog正确的话，@1x, @2x, @3x素材添加正确的话，这样做直接就OK了，是没有问题的。
如果有不当使用的话就麻烦了, 诸如命名不当的小问题，直接这样读取就会出现问题，需要我们手动解析并加载。</p>

<p>进入Asset Catalog目录:
echo &ldquo;{&#34;assets\&rdquo;: [&ldquo; > a.json
find Images.xcassets/ -name *.json | while read jsonfile; do
tmppath=${jsonfile%.imageset/<em>}
assetname=${tmppath##</em>/}
echo &rdquo;{\&ldquo;assetname\&rdquo;:\&ldquo;${assetname}\&rdquo;,\&ldquo;content\&rdquo;:&ldquo; >> a.json
cat $jsonfile >> a.json;
echo &lsquo;},&rsquo; >>a.json
done
echo &lsquo;]}&rsquo; >>a.json</p>

<p>去掉最后一个逗号，a.json就成了一个标准的JSON文件，我们需要做的就是解析此文件，根据实际情况加载不同的文件。</p>

<p>使用Category的方式扩展UIImage类，重写imageNamed方法，这样原来所有带缓存的加载方式就变成了不带缓存的方式，当然，这个需要灵活处理，哪些图片需要加载之后缓存在内存，哪些不需要缓存在内存，都要分开处理。</p>

<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/11/15/ios-image-cache/'>http://devsay.com/blog/2014/11/15/ios-image-cache/</a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'>http://devsay.com</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autolayout之SizeClass]]></title>
    <link href="http://devsay.com/blog/2014/10/22/ios-sizeclass/"/>
    <updated>2014-10-22T19:52:03+08:00</updated>
    <id>http://devsay.com/blog/2014/10/22/ios-sizeclass</id>
    <content type="html"><![CDATA[<p>1.Size Class:</p>

<p>Size Classes是iOS8中提出的新概念，表示对所有iOS设备的一个抽象，每个组合对应了不同的设备分类。</p>

<p>XCode6默认新创建的Xib是一个正方形，Size Class默认的值是wAny | hAny，对应所有iOS设备的layout。</p>

<p><img src="http://devsay.com/images/sizeclass/0.png" alt="" /></p>

<p>横向即Width的取值依次为: Compact Any Regular</p>

<p>纵向即Height的取值依次为：Compact Any Regular
两者共可搭配出9中layout。</p>

<p>2.约束：</p>

<p>Autolayout的核心是约束。</p>

<p>可以点击XCode的Editor菜单添加约束项，但每次只能选择一个。</p>

<p><img src="http://devsay.com/images/sizeclass/1.png" alt="" /></p>

<p>还可以点击右下角的一排按钮，可以同时添加或修改多个约束项，非常方便。</p>

<p><img src="http://devsay.com/images/sizeclass/2.png" alt="" /></p>

<p>其中有些约束是针对多个UIView的，你需要同时选中多个UIView才能添加。</p>

<p><img src="http://devsay.com/images/sizeclass/3.png" alt="" /></p>

<p>添加约束的关键是让系统能够根据你添加的约束确定视图的准确位置，如果添加的约束过少或者互相矛盾就会报错。</p>

<p><img src="http://devsay.com/images/sizeclass/4.png" alt="" /><p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/10/22/ios-sizeclass/'><a href="http://devsay.com/blog/2014/10/22/ios-sizeclass/">http://devsay.com/blog/2014/10/22/ios-sizeclass/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ios定位服务CoreLocation]]></title>
    <link href="http://devsay.com/blog/2014/10/10/ios-corelocation/"/>
    <updated>2014-10-10T19:22:23+08:00</updated>
    <id>http://devsay.com/blog/2014/10/10/ios-corelocation</id>
    <content type="html"><![CDATA[<p>基于LBS的应用开发是当今移动开发中的一大热门, 其中主要涉及到地图和定位两个方面.</p>

<p>iOS开发中, 定位服务依赖于CoreLocation框架, CLLocationManager是CoreLocation中的核心类.</p>

<p>初始化:</p>

<p>if ([CLLocationManagerlocationServicesEnabled]) {
            self.locationManager = [[CLLocationManageralloc]init];
            self.locationManager.delegate =self;
            self.locationManager.desiredAccuracy =kCLLocationAccuracyBest;
            self.locationManager.distanceFilter =kDistanceFilter;
            self.locationManager.headingFilter =kHeadingFilter;
            self.locationManager.pausesLocationUpdatesAutomatically =YES;
            self.locationManager.activityType =CLActivityTypeFitness;
        }</p>

<p>desiredAccuracy: 想要获得的定位精度, 会尽可能地满足设定的精度, 但不能保证在实际过程中能达到.
distanceFilter: 低于水平距离会过滤掉而不产生更新事件.</p>

<p>开始定位服务:</p>

<p>[self.locationManagerstartUpdatingLocation];
[self.locationManagerstartUpdatingHeading];</p>

<p>当获取到位置信息或位置产生变化时会通知代理</p>

<p>获取到新的位置:</p>

<p>locationManager:didUpdateLocations
方向产生变化时:</p>

<p>locationManager:didUpdateHeading:<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/10/10/ios-corelocation/'><a href="http://devsay.com/blog/2014/10/10/ios-corelocation/">http://devsay.com/blog/2014/10/10/ios-corelocation/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS数组快速排序]]></title>
    <link href="http://devsay.com/blog/2014/10/08/ios-sort/"/>
    <updated>2014-10-08T16:48:38+08:00</updated>
    <id>http://devsay.com/blog/2014/10/08/ios-sort</id>
    <content type="html"><![CDATA[<p>对数组元素排序是使用任何编程语言都会遇到的一个问题，其中大部分已经提供了一些很方便的排序方法供我们使用，那么iOS开发中有哪些方法可以让我们实现对数组元素快速排序呢？</p>

<p>先定义一个数组，然后对其中元素进行排序：</p>

<p>NSArray *originalArray = [NSArray arrayWithObjects:[NSNumbernumberWithInt:5],
                              [NSNumber numberWithInt:6],
                              [NSNumber numberWithInt:3],
                              [NSNumber numberWithInt:4],
                              [NSNumber numberWithInt:1],
                              [NSNumber numberWithInt:2],
                              nil];</p>

<p>方法1:NSComparator</p>

<p>NSArray <em>sortedArray = [originalArray sortedArrayUsingComparator:^(NSNumber </em>number1,NSNumber *number2) {</p>

<pre><code>    int val1 = [number1 intValue];

    int val2 = [number2 intValue];

    if (val1 &gt; val2) {
        returnNSOrderedAscending;
    } else {
        return NSOrderedDescending;
    }
}];
</code></pre>

<p>NSLog(@&ldquo;%@&rdquo;, sortedArray);</p>

<p>方法2.NSSortDescriptor</p>

<p>NSSortDescriptor *descriptor = [[NSSortDescriptoralloc]initWithKey:nilascending:YES];</p>

<p>NSArray *sortArray = [NSArrayarrayWithObjects:descriptor,nil];</p>

<p>NSArray *sortedArray = [originalArray sortedArrayUsingDescriptors:sortArray];</p>

<p>NSLog(@&ldquo;%@&rdquo;, sortedArray);<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/10/08/ios-sort/'><a href="http://devsay.com/blog/2014/10/08/ios-sort/">http://devsay.com/blog/2014/10/08/ios-sort/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ios8 定位服务]]></title>
    <link href="http://devsay.com/blog/2014/09/28/ios8-location/"/>
    <updated>2014-09-28T21:50:25+08:00</updated>
    <id>http://devsay.com/blog/2014/09/28/ios8-location</id>
    <content type="html"><![CDATA[<p>笔者将XCode5升级到Xcode6，iOS7升级到iOS8，重新编译发现工程无法使用定位服务，App启动时也没提示用户是否允许当前App使用定位服务。</p>

<p>iOS8对定位服务做了修改，需要在info.plist增加一项：
NSLocationWhenInUseUsageDescription 这里可以自定义对用户的提示。
重新编译时，系统就会提示用户是否允许App启用定位服务。</p>

<p>今天先这样，明天深入研究下。<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/09/28/ios8-location/'><a href="http://devsay.com/blog/2014/09/28/ios8-location/">http://devsay.com/blog/2014/09/28/ios8-location/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iOS语音合成(TTS)]]></title>
    <link href="http://devsay.com/blog/2014/09/20/ios-tts/"/>
    <updated>2014-09-20T18:20:19+08:00</updated>
    <id>http://devsay.com/blog/2014/09/20/ios-tts</id>
    <content type="html"><![CDATA[<p>在iOS开发当中，我们经常需要用到TTS(Text To Speech，将文本合成为语音)功能</p>

<p>实现这种方案有两种情况：</p>

<p>1.本地实现；</p>

<p>2.网络实现。</p>

<p>目前的解决方案：</p>

<p>1.AVSpeechSynthesizer</p>

<p>AVSpeechSynthesizer *synthesizer = [[AVSpeechSynthesizer alloc] init];</p>

<p>synthesizer.delegate = self;</p>

<p>AVSpeechSynthesisVoice *voice = [AVSpeechSynthesisVoice voiceWithLanguage:@&ldquo;en&rdquo;];</p>

<p>AVSpeechUtterance *utterance = [[AVSpeechUtterance alloc] initWithString:@&ldquo;This is a test&rdquo;];</p>

<p>utterance.rate *= 0.5;</p>

<p>utterance.voice = voice;</p>

<p>[synthesizer speakUtterance:utterance];</p>

<p>优点：调用iOS自带语音库，不需要单独往工程中添加语音包，有利于控制包的大小；</p>

<p>缺点：对中文语音支持的不是很好，在语音的音质、断句方面不够理想。</p>

<p>2.第三方语音：百度语音、讯飞语音</p>

<p>国内讯飞做得比较早，技术各方面比较成熟，支持的平台多，相比其它第三方有明显的优势。</p>

<p>百度语音出来的比较晚，对技术支持方面不完善，不过感觉音色方面比讯飞好。</p>

<p>不过讯飞和百度目前只支持在线合成。<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/09/20/ios-tts/'><a href="http://devsay.com/blog/2014/09/20/ios-tts/">http://devsay.com/blog/2014/09/20/ios-tts/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fatal Error: File Has Been Modified Since the Precompiled Header]]></title>
    <link href="http://devsay.com/blog/2014/09/18/precompiled-header/"/>
    <updated>2014-09-18T10:20:28+08:00</updated>
    <id>http://devsay.com/blog/2014/09/18/precompiled-header</id>
    <content type="html"><![CDATA[<p>编译工程时，报错</p>

<p>fatal error: file &lsquo;/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/ iPhoneOS8.0.sdk/System/Library/Frameworks/AVFoundation.framework/Headers/AVAudioSession.h&rsquo; has been modified since the precompiled header &lsquo;/Users/Mac/Library/Developer/Xcode/DerivedData/xxx-frlhxpamlowshtayyttcuivhpzcw/Build/Intermediates/PrecompiledHeaders/xxx-Prefix-Debug-dmssclbwyzjgywetcgfenqhmlpdi/xxx-Prefix-Debug.pch.pch&rsquo; was built</p>

<p>xxx表示工程名称</p>

<p>仔细查找原因，发现是不小心改动了AVAudioSession.h这个头文件导致的</p>

<p>解决办法：</p>

<p>1.Product->Clean</p>

<p>2.删除~/Library/Developer/Xcode/DeriveData/下所有文件</p>

<p>重新编译，成功。<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/09/18/precompiled-header/'><a href="http://devsay.com/blog/2014/09/18/precompiled-header/">http://devsay.com/blog/2014/09/18/precompiled-header/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[iPhone6分辨率适配]]></title>
    <link href="http://devsay.com/blog/2014/09/12/iphone6-screen/"/>
    <updated>2014-09-12T15:51:29+08:00</updated>
    <id>http://devsay.com/blog/2014/09/12/iphone6-screen</id>
    <content type="html"><![CDATA[<p>9月10日苹果正式发布了全新的iPhone6、iPhone6 Plus, 相比之前, 这次iPhone在屏幕尺寸上变化巨大。最近开发者和设计师们都很关心自己的App应该怎么来对两款iPhone6适配。</p>

<p>先看苹果历代iPhone公布的分辨率及ppi
iPhone6 Plus: 1920x1080, 401 ppi
iPhone6: 1334x750, 326 ppi
iPhone5s: 1136x640, 326 ppi
iPhone4：960x640, 326 ppi</p>

<p>iPhone6与iPhone4，iPhone5s的ppi是一样的</p>

<p>iPhone6 Plus准确尺寸: 1242x2208</p>

<p>Points做iOS开发时, 我们使用的是Points, 系统会将Points整数倍处理光栅化为Rendered Pixels, 再将Rendered Pixel转换成Physical Pixels在屏幕上显示出来。
320x480点坐标系经过2x渲染之后的Rendered Pixels为640x960
iPhone6: 375x667点坐标系经过2x渲染之后的Rendered Pixels为750x1334
iPhone6 Plus: 414x736点坐标系进过3x渲染之后的Rendered Pixel为1242x2208
但是iPhone6 Plus实际分辨率为1080x1920，在Rendered Pixel会进行降低采样率的处理来显示在物理设备上。</p>

<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/09/12/iphone6-screen/'>http://devsay.com/blog/2014/09/12/iphone6-screen/</a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'>http://devsay.com</a>
            </p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CocoaPods]]></title>
    <link href="http://devsay.com/blog/2014/09/04/cocoapods/"/>
    <updated>2014-09-04T15:53:50+08:00</updated>
    <id>http://devsay.com/blog/2014/09/04/cocoapods</id>
    <content type="html"><![CDATA[<p>在做iOS项目开发时，大量的第三方库极大的提高了我们的开发效率。随着功能的不断增加，工程变得越来越庞大，使用到的第三方库也越来越多，这时第三方库管理工具CocoaPods的重要性就凸显出来了。在第三方库的引入、升级、依赖关系上，CocoaPods让一切变得简单。
1.安装
安装CocoaPods依赖Ruby环境
gem install cocoapods
2.使用
现在iOS开发中使用到的大部分第三方库都支持了CocoaPods，具体到使用的库时，我们可以查询下是否支持。
pod search EGOTableViewPullRefresh</p>

<p>在工程的主目录中创建文件Podfile，将工程中需要使用的库的名称及对应版本写到这个文件中。
pod &lsquo;EGOTableViewPullRefresh&rsquo;, &lsquo;~> 0.1.0&rsquo;</p>

<p>pod install
安装完成后，在工程的主目录中生成一个工程名对应的.xcworkspace文件，以后就使用这个文件来打开工程。
以后在需要往工程中添加第三方库时，先编辑Podfile文件，然后执行pod update.<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/09/04/cocoapods/'><a href="http://devsay.com/blog/2014/09/04/cocoapods/">http://devsay.com/blog/2014/09/04/cocoapods/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新起点]]></title>
    <link href="http://devsay.com/blog/2014/09/03/preface/"/>
    <updated>2014-09-03T20:05:33+08:00</updated>
    <id>http://devsay.com/blog/2014/09/03/preface</id>
    <content type="html"><![CDATA[<p>开发者说今天正式扬帆起航。新起点、新梦想、新挑战。<p class='post-footer'>
            原文地址：
            <a href='http://devsay.com/blog/2014/09/03/preface/'><a href="http://devsay.com/blog/2014/09/03/preface/">http://devsay.com/blog/2014/09/03/preface/</a></a><br/>
            Written by <a href='http://devsay.com'>devsay</a>.
            &nbsp;Posted at <a href='http://devsay.com'><a href="http://devsay.com">http://devsay.com</a></a>
            </p></p>
]]></content>
  </entry>
  
</feed>
